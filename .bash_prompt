if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    black=$(tput setaf 0);
    red=$(tput setaf 1);
    green=$(tput setaf 2);
    yellow=$(tput setaf 3);
    blue=$(tput setaf 4);
    magenta=$(tput setaf 5);
    cyan=$(tput setaf 6);
    white=$(tput setaf 7);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    red="\e[1;31m";
    green="\e[1;32m";
    yellow="\e[1;33m";
    blue="\e[1;34m";
    magenta="\e[1;35m";
    cyan="\e[1;36m";
    violet="\e[1;35m";
    white="\e[1;37m";
fi;

# Set a color for the git branch name based on its status
function git_status_color {
  local git_status="$(git status 2> /dev/null)"

  if [[ ! $git_status =~ "working tree clean" ]]; then
    echo -e $red
  elif [[ $git_status =~ "Your branch is ahead of" ]]; then
    echo -e $yellow
  elif [[ $git_status =~ "nothing to commit" ]]; then
    echo -e $green
  else
    echo -e $white
  fi
}

# Get the current git branch name
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/'
}

PS1='\n';
PS1+='\[$green\][\[$reset\]';
PS1+='\[$white\]\W\[$reset\]';
PS1+='\[$(git_status_color)\]';
PS1+='$(parse_git_branch)';
PS1+='\[$reset\]'
PS1+='\[$green\]]\[$reset\] ';
export PS1;

PS2='${yellow}> ${reset}';
export PS2;
